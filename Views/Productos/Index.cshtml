@model List<GestionVentas.Models.Productos>
@{
    ViewBag.Title = "Productos";
}

<body>
<div class="container mt-4">

    <form class="mb-3 d-flex align-items-center gap-2" onsubmit="return false;">
    <input type="text" id="inputBusqueda" placeholder="Buscar productos..." class="form-control form-control-sm w-50" />

   <!--   <button class="btn btn-sm btn-outline-primary" onclick="buscarProductos()">üîç</button>  -->
</form>


    <h1 class="mb-4">üõí Producto</h1>

    <a href="@Url.Action("Create", "Productos")" class="btn btn-primary mb-3">
        ‚ûï Agregar Producto
    </a>


   <table class="table table-striped table-bordered small">
    <thead class="table-dark">
        <tr>
            <th class="text-center">C√≥digo</th>
            <th style="width: 250px;">Nombre</th>
            <th class="text-end">Precio Costo</th>
            <th class="width: 50px; text-center">Recargo (%)</th>
            <th class="text-end">Precio Venta</th>
            <th>Stock</th>
            <th id="ordenarProveedor" style="cursor:pointer;">Proveedor üîΩ</th>

            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var prod in Model)
        {
            var rutaImagen = prod.Imagen?.Replace("\\", "/") ?? "";
            if (!string.IsNullOrEmpty(rutaImagen) && !rutaImagen.StartsWith("/"))
            {
                rutaImagen = "/" + rutaImagen;
            }

            var stockClass = prod.StockActual <= 3 ? "text-danger fw-bold" : "";

            <tr>
                <td class="text-center">@prod.Codigo</td>
                <td>@prod.Nombre</td>
                <td class="text-end">$@prod.PrecioCosto.ToString("0.00")</td>
                <td class="text-center">@prod.RecargoPorcentaje %</td>
                <td class="text-end"><strong>$@prod.PrecioVenta.ToString("0.00")</strong></td>
               <td class="text-center @stockClass">@prod.StockActual</td>

                <td>@prod.Proveedor</td>
                <td>
                    <a href="@Url.Action("Edit", "Productos", new { id = prod.IdProducto })" class="btn btn-sm btn-warning">‚úèÔ∏è</a>
                    <a href="@Url.Action("Delete", "Productos", new { id = prod.IdProducto })" class="btn btn-sm btn-danger">üóëÔ∏è</a>
                    <button type="button"
        class="btn btn-sm btn-info"
        data-bs-toggle="modal"
        data-bs-target="#modalImagen"
        data-img="@rutaImagen"
        data-nombre="@prod.Nombre"
        data-descripcion="@prod.Descripcion">
    üñºÔ∏è Ver Imagen
</button>

                </td>
            </tr>
        }
    </tbody>
</table>



</div>

<div class="d-flex justify-content-center mt-4">
    @for (int i = 1; i <= 10; i++)  // suponemos m√°ximo 10 p√°ginas por ahora
    {
        <a class="btn @(i == ViewBag.PaginaActual ? "btn-primary" : "btn-outline-primary") me-1"
           href="@Url.Action("Index", new { pagina = i, busqueda = ViewBag.Busqueda })">
            @i
        </a>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="modalImagen" tabindex="-1" aria-labelledby="modalImagenLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content text-center">
      <div class="modal-header">
        <h5 class="modal-title" id="modalImagenLabel">Imagen del producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body text-center">
        <h6 id="nombreProducto" class="mb-2"></h6>
        
        <img id="imagenProducto"
             src=""
             alt="Imagen del producto"
             width="180"
             height="180"
             style="object-fit: cover; border: 1px solid #ccc; border-radius: 8px;"
             onerror="this.src='/imagenes/no-disponible.png'; document.getElementById('mensajeImagen').style.display = 'block';" />
        <p id="descripcionProducto" class="text-muted" style="font-size: 0.9rem;"></p>
        <p id="mensajeImagen" style="display:none; color: red; margin-top: 10px;">
            ‚ö†Ô∏è No hay imagen cargada para este producto.
        </p>
      </div>
    </div>
  </div>
</div>


@section Scripts {
<script>
    const modalImagen = document.getElementById('modalImagen');
    modalImagen.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const imgSrc = button.getAttribute('data-img');
        const nombre = button.getAttribute('data-nombre');
        const descripcion = button.getAttribute('data-descripcion');

        const imagenProducto = document.getElementById('imagenProducto');
        const nombreProducto = document.getElementById('nombreProducto');
        const descripcionProducto = document.getElementById('descripcionProducto');
        const mensajeImagen = document.getElementById('mensajeImagen');

        imagenProducto.src = imgSrc;
        nombreProducto.textContent = nombre;
        descripcionProducto.textContent = descripcion;
        mensajeImagen.style.display = 'none';
    });

// <!-- Busqueda de productos -->

 const inputBusqueda = document.getElementById('inputBusqueda');

inputBusqueda.addEventListener('input', function () {
    const valor = this.value.trim();

    fetch(`/Productos/Buscar?term=${encodeURIComponent(valor)}`)
        .then(response => {
            if (!response.ok) throw new Error("Error en la respuesta del servidor");
            return response.json();
        })
        .then(data => {
            const tbody = document.querySelector("table tbody");
            tbody.innerHTML = ""; // Limpiar resultados actuales

            if (data.length === 0) {
                tbody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No se encontraron productos</td></tr>`;
                return;
            }
console.log("Productos encontrados:", data);

            data.forEach(prod => {
               let fila = `<tr>
    <td>${prod.codigo}</td>
    <td>${prod.nombre}</td>
    <td class="text-end">$${prod.precioCosto.toFixed(2)}</td>
    <td class="text-center">${prod.recargoPorcentaje} %</td>
    <td class="text-end"><strong>$${prod.precioVenta.toFixed(2)}</strong></td>
    <td class="text-center ${prod.stockActual <= 3 ? 'text-danger fw-bold' : ''}">${prod.stockActual}</td>
    <td>${prod.proveedor}</td>
    <td>
        <a href="/Productos/Edit/${prod.idProducto}" class="btn btn-sm btn-warning">‚úèÔ∏è</a>
        <a href="/Productos/Delete/${prod.idProducto}" class="btn btn-sm btn-danger">üóëÔ∏è</a>
        <button type="button"
                class="btn btn-sm btn-info"
                data-bs-toggle="modal"
                data-bs-target="#modalImagen"
                data-img="${prod.imagen?.replaceAll("\\\\", "/").trim()}"
                data-nombre="${prod.nombre}"
                data-descripcion="${prod.descripcion}">
            üñºÔ∏è Ver Imagen
        </button>
    </td>
</tr>`;

                tbody.innerHTML += fila;
            });
        })
        .catch(error => {
            console.error("Error al cargar productos:", error);
        });
});

function buscarProductos() {
    inputBusqueda.dispatchEvent(new Event("input"));
}



    // ------------------ fin busqueda de productos -----------------------------------


    //----------------------------------- ordena por proveedor -----------------------------------

    let ordenAscendente = true;

    document.getElementById('ordenarProveedor').addEventListener('click', function () {
        const tbody = document.querySelector("table tbody");
        const filas = Array.from(tbody.querySelectorAll("tr"));

        filas.sort((a, b) => {
            const provA = a.children[6].textContent.trim().toLowerCase(); // Columna proveedor
            const provB = b.children[6].textContent.trim().toLowerCase();

            if (provA < provB) return ordenAscendente ? -1 : 1;
            if (provA > provB) return ordenAscendente ? 1 : -1;
            return 0;
        });

        // Limpiar y volver a insertar
        tbody.innerHTML = "";
        filas.forEach(f => tbody.appendChild(f));

        ordenAscendente = !ordenAscendente;

        // Cambiar √≠cono visual (opcional)
        this.textContent = `Proveedor ${ordenAscendente ? "üîΩ" : "üîº"}`;
    });
</script>

}

</body>
